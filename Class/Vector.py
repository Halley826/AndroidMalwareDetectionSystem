#!/usr/bin/env python
# _*_ coding: utf-8 _*_
# @Time : 2021/12/27 10:01 PM
# @Author : Halley@https://github.com/Halley826/
# @Version：V 1.0
# @File : test.py
# @desc :生成特征向量，并保存
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
FILE_PATH= "../out/dataset/train.txt"
base_dir="/Users/halley/OneDrive/code/python/own_project/pycharm/androidMalwareDetection/"
class Vector:
    def __init__(self):
        pass
    def modelSave(self):
        pass
    def Label_value_counts(self):
        pass
    def readFile(self):
        original_data = pd.read_table(FILE_PATH, names=['label', 'name', 'size', 'permission', 'Text'])
        print("original_data.shape:{}".format(original_data.shape))
        return original_data
    def dropna(self,original_file):
        dropnaed_data=original_file.dropna()
        #dropnaed_data=dropnaed_data.reset_index()#重置标签
        print("dropnaed_data.shape:{}".format(dropnaed_data.shape))
        print(dropnaed_data.label.value_counts())#类别统计
        return dropnaed_data
    def display_dataset(self,dropnaed_data):
        plt.figure(figsize=(7, 7))
        counts = dropnaed_data['label'].value_counts()
        plt.pie(counts, labels=counts.index, startangle=90, wedgeprops={'width': 0.6}, autopct='%1.1f%%')
        plt.text(x=-0.3, y=0, s='Total Value: {}'.format(dropnaed_data.shape[0]))
        plt.title('Distribution of app in the Data Set', fontsize=16)
        plt.savefig('../out/picture/Distribution of app in the Data Set.pdf', bbox_inches='tight')
        plt.show()
    def vector_label(self,dropnaed_data):
        y = []  # 类别为：恶意软件、良性软件
        for label in dropnaed_data["label"]:
            if label == "m":
                y.append(0)
            elif label == "b":
                y.append(1)
        y = np.asarray(y)
        print("y的数据类型：{}".format(type(y)))
        print("y的长度：{}".format(len(y)))
        print("y:{}".format(y[:]))
        return y
    def fun_vec(self,list1, list2):
        list3 = np.zeros(len(list1), dtype=int)
        #     print("type of list3:{}".format(type(list3)))
        i = 0
        for list_1 in list1:
            for list_2 in list2:
                if list_1 == list_2:
                    # print("list_1={},i={}".format(list_1,i))
                    list3[i] = 1
            i += 1
        return list3
    def vector_X(self,label):
        permisson_list = []
        list1=np.load(base_dir+"/out/config/permission.npy")
        for text_1 in dropnaed_data["permission"]:
            list_2 = []
            for text in text_1.split():
                list_2.append(text)
            permisson_list.append(list(self.fun_vec(list1,list_2)))
        df_permisson_vectorizer = pd.DataFrame(data=permisson_list,index=dropnaed_data['name'],columns=list1)
        df_permisson_vectorizer['label'] = label
        df_permisson_vectorizer.to_csv("../out/vector/permission_vector.csv")
        return df_permisson_vectorizer
if __name__=="__main__":
    train=Vector()
    original_data=train.readFile()
    dropnaed_data=train.dropna(original_data)
    print(type(dropnaed_data))
    train.display_dataset(dropnaed_data)
    y=train.vector_label(dropnaed_data)
    print(train.vector_X(y))
