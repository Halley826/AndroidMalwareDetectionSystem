#!/usr/bin/env python
# _*_ coding: utf-8 _*_
# @Time : 2021/12/27 10:01 PM
# @Author : Halley@https://github.com/Halley826/
# @Version：V 1.0
# @File : test.py
# @desc :提取特征，并保存
from androguard.misc import AnalyzeAPK
import numpy as np
import os
import pandas as pd
base_dir="/Users/halley/OneDrive/code/python/own_project/pycharm/androidMalwareDetection/"
train_file_name="train"
class ExtractFeature:
    def __init__(self ,file_path,file_name,apk_type):
        self.file_path = file_path
        self.file_name = file_name
        self.apk_type = apk_type
    def isDup(self):
        if os.path.exists(base_dir+'/out/dataset/{}.txt'.format(train_file_name)):
            original_data = pd.read_table(base_dir+'/out/dataset/{}.txt'.format(train_file_name), names=['label', 'name', 'size', 'permission', 'Text'])
            for item in original_data['name']:
                if self.file_name==item:
                    return True
            return False
        else:
            print(base_dir+'/out/dataset/{}.txt is not exist'.format(train_file_name))
            file=open(base_dir+'/out/dataset/{}.txt'.format(train_file_name),'w')
            file.close()
            return False
    def decode(self):
        if not self.isDup():
            global a, d, dx
            a, d, dx = AnalyzeAPK(self.file_path)
        else:
            print(self.file_name + "is existed")
    def api_writer(self):
        for item in dx.classes:  # 获取Api的过程
            for meth in dx.classes[item].get_methods():
                for _, call, _ in meth.get_xref_to():
                    data = ("{}".format(call.name))
                    with open(base_dir+'/out/dataset/{}.txt'.format(train_file_name), 'a') as f:
                        f.write(data + ' ')
                        f.close()
    def permission_writer(self):
        permission_list = np.load(base_dir+"/out/config/permission.npy")
        for item in a.get_permissions():
            if item in permission_list:
                with open(base_dir+'/out/dataset/{}.txt'.format(train_file_name), 'a') as f:
                    f.write(item + ' ')
                    f.close()

    def apk_name_writer(self):
        with open(base_dir+'/out/dataset/{}.txt'.format(train_file_name), 'a') as f:
            f.write(self.file_name)
            f.close()

    def sig_writer(self,sig):
        with open(base_dir+'/out/dataset/{}.txt'.format(train_file_name), 'a') as f:
            f.write(sig)
            f.close()
    def label_writer(self):
        with open(base_dir+'/out/dataset/{}.txt'.format(train_file_name), 'a') as f:
            f.write(self.apk_type)
            f.close()
    def apk_size_writer(self):
        with open(base_dir+'/out/dataset/{}.txt'.format(train_file_name), 'a') as f:
            f.write(str(int(os.path.getsize(self.file_path) / 1000)))
            print(str(int(os.path.getsize(self.file_path) / 1000)))
            f.close()
    def feature_get(self):
        print("*")
        if not self.isDup():
            self.label_writer()
            self.sig_writer('\t')
            self.apk_name_writer()
            self.sig_writer('\t')
            self.apk_size_writer()
            self.sig_writer('\t')
            self.permission_writer()
            self.sig_writer('\t')
            self.api_writer()
            self.sig_writer('\n')
            print("{} is ok".format(self.file_name))
if __name__=='__main__':
    dataset_dir_m="/Users/halley/datasets/test/apk/malware"
    dataset_dir_b="/Users/halley/datasets/test/apk/benign"
    dataset_dir_used=dataset_dir_b
    for root,dir,files in os.walk(dataset_dir_used,topdown=False):
        for file_name in files:
            try:
                #if file_name.endswith(".apk"):
                #print(file_name)
                file_path=os.path.join(root,file_name)
                ex=ExtractFeature(file_path,file_name,"b" if dataset_dir_used==dataset_dir_b else "m")
                ex.decode()
                ex.feature_get()
            except:
                print(file_name)